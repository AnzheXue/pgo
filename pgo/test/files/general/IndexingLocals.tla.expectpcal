------------------------------- MODULE IndexingLocals -------------------------------

EXTENDS Naturals, Sequences, TLC, FiniteSets

(********************

--mpcal IndexingLocals {
    define {
        NodeSet== 1..1
    }

    archetype ANode()
    variables log = <<>>, p;
    {
    logWrite:
        log := Append(log, 68);
        log := Append(log, 5);
        log[2] := 21;
        log := Append(log, 999);
        log := Append(log, [foo |-> 42]);
    logUpdate:
        log[1] := 3;
    logRead:
        p := log[1];
    multiWrite:
        log[4].foo := 43;
    }

    fair process (node \in NodeSet) == instance ANode();
}


\* BEGIN PLUSCAL TRANSLATION
--algorithm IndexingLocals {
  define{
    NodeSet == (1) .. (1)
  }
  
  fair process (node \in NodeSet)
    variables log = <<>>; p;
  {
    logWrite:
      with (
        log4 = Append(log, 68), 
        log5 = Append(log4, 5), 
        log6 = [log5 EXCEPT ![2] = 21], 
        log7 = Append(log6, 999)
      ) {
        log := Append(log7, [foo |-> 42]);
        goto logUpdate;
      };
    logUpdate:
      log := [log EXCEPT ![1] = 3];
      goto logRead;
    logRead:
      p := (log)[1];
      goto multiWrite;
    multiWrite:
      log := [log EXCEPT ![4]["foo"] = 43];
      goto Done;
  }
}

\* END PLUSCAL TRANSLATION

********************)
\* BEGIN TRANSLATION (chksum(pcal) = "31768099" /\ chksum(tla) = "8c269fb0")
CONSTANT defaultInitValue
VARIABLE pc

(* define statement *)
NodeSet == (1) .. (1)

VARIABLES log, p

vars == << pc, log, p >>

ProcSet == (NodeSet)

Init == (* Process node *)
        /\ log = [self \in NodeSet |-> <<>>]
        /\ p = [self \in NodeSet |-> defaultInitValue]
        /\ pc = [self \in ProcSet |-> "logWrite"]

logWrite(self) == /\ pc[self] = "logWrite"
                  /\ LET log4 == Append(log[self], 68) IN
                       LET log5 == Append(log4, 5) IN
                         LET log6 == [log5 EXCEPT ![2] = 21] IN
                           LET log7 == Append(log6, 999) IN
                             /\ log' = [log EXCEPT ![self] = Append(log7, [foo |-> 42])]
                             /\ pc' = [pc EXCEPT ![self] = "logUpdate"]
                  /\ p' = p

logUpdate(self) == /\ pc[self] = "logUpdate"
                   /\ log' = [log EXCEPT ![self] = [log[self] EXCEPT ![1] = 3]]
                   /\ pc' = [pc EXCEPT ![self] = "logRead"]
                   /\ p' = p

logRead(self) == /\ pc[self] = "logRead"
                 /\ p' = [p EXCEPT ![self] = (log[self])[1]]
                 /\ pc' = [pc EXCEPT ![self] = "multiWrite"]
                 /\ log' = log

multiWrite(self) == /\ pc[self] = "multiWrite"
                    /\ log' = [log EXCEPT ![self] = [log[self] EXCEPT ![4]["foo"] = 43]]
                    /\ pc' = [pc EXCEPT ![self] = "Done"]
                    /\ p' = p

node(self) == logWrite(self) \/ logUpdate(self) \/ logRead(self)
                 \/ multiWrite(self)

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == (\E self \in NodeSet: node(self))
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in NodeSet : WF_vars(node(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION


=============================================================================
\* Modification History
\* Last modified Thu Nov 25 11:28:00 PST 2021 by shayan
\* Created Thu Oct 21 11:00:36 PDT 2021 by shayan
