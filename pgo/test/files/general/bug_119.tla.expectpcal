----------------------------- MODULE test -----------------------------

EXTENDS Naturals, Sequences, TLC, FiniteSets

(***************************************************************************
--mpcal test {

(* *)
procedure inc(self_, ref counter) {
    inc1: counter := counter + 1;
    inc2: return;
}

(* *)
archetype Counter(ref out)
variables value;
{
    c0: value := 0;
    c1: call inc(self, ref value);
    c2: out := value;
}

  variables out;

  process (Server = "1") == instance Counter(ref out);
}

\* BEGIN PLUSCAL TRANSLATION
--algorithm test {
  variables out;
  
  procedure inc0(self_)
  {
    inc1:
      value := (value) + (1);
      goto inc2;
    inc2:
      return;
  }
  
  process (Server = "1")
    variables value;
  {
    c0:
      value := 0;
      goto c1;
    c1:
      call inc0(self);
      goto c2;
    c2:
      out := value;
      goto Done;
  }
}

\* END PLUSCAL TRANSLATION




***************************************************************************)
\* BEGIN TRANSLATION
CONSTANT defaultInitValue
VARIABLES pc, out, stack, self_, value

vars == << pc, out, stack, self_, value >>

ProcSet == {"1"}

Init == (* Global variables *)
        /\ out = defaultInitValue
        (* Procedure inc0 *)
        /\ self_ = [ self \in ProcSet |-> defaultInitValue]
        (* Process Server *)
        /\ value = defaultInitValue
        /\ stack = [self \in ProcSet |-> << >>]
        /\ pc = [self \in ProcSet |-> "c0"]

inc1(self) == /\ pc[self] = "inc1"
              /\ value' = (value) + (1)
              /\ pc' = [pc EXCEPT ![self] = "inc2"]
              /\ UNCHANGED << out, stack, self_ >>

inc2(self) == /\ pc[self] = "inc2"
              /\ pc' = [pc EXCEPT ![self] = Head(stack[self]).pc]
              /\ self_' = [self_ EXCEPT ![self] = Head(stack[self]).self_]
              /\ stack' = [stack EXCEPT ![self] = Tail(stack[self])]
              /\ UNCHANGED << out, value >>

inc0(self) == inc1(self) \/ inc2(self)

c0 == /\ pc["1"] = "c0"
      /\ value' = 0
      /\ pc' = [pc EXCEPT !["1"] = "c1"]
      /\ UNCHANGED << out, stack, self_ >>

c1 == /\ pc["1"] = "c1"
      /\ /\ self_' = [self_ EXCEPT !["1"] = self]
         /\ stack' = [stack EXCEPT !["1"] = << [ procedure |->  "inc0",
                                                 pc        |->  "c2",
                                                 self_     |->  self_["1"] ] >>
                                             \o stack["1"]]
      /\ pc' = [pc EXCEPT !["1"] = "inc1"]
      /\ UNCHANGED << out, value >>

c2 == /\ pc["1"] = "c2"
      /\ out' = value
      /\ pc' = [pc EXCEPT !["1"] = "Done"]
      /\ UNCHANGED << stack, self_, value >>

Server == c0 \/ c1 \/ c2

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == Server
           \/ (\E self \in ProcSet: inc0(self))
           \/ Terminating

Spec == Init /\ [][Next]_vars

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION
=============================================================================
