---- MODULE MultiWithSemantics ----
EXTENDS TLC, Integers, Sequences

(* --mpcal MultiWithSemantics {

mapping macro Inc {
    read {
        with(v = $variable) {
            $variable := $variable + 1;
            yield v;
        };
    }
    write {
        assert FALSE;
    }
}

archetype AnExample(ref foo) {
lbl:
    with(x = foo, y = foo + x) {
        print y;
    };
}

variables gFoo = 0;

fair process (Example = 1) == instance AnExample(ref gFoo)
    mapping gFoo via Inc;

} *)

(*

\* BEGIN PLUSCAL TRANSLATION
--algorithm MultiWithSemantics {
  variables gFoo = 0;
  
  fair process (Example = 1)
  {
    lbl:
      with (
        v1 = gFoo, 
        gFoo0 = (gFoo) + (1), 
        yielded_gFoo0 = v1, 
        x = yielded_gFoo0, 
        v0 = gFoo0
      ) {
        gFoo := (gFoo0) + (1);
        with (
          yielded_gFoo = v0, 
          y = (yielded_gFoo) + (x)
        ) {
          print y;
          goto Done;
        };
      };
  }
}

\* END PLUSCAL TRANSLATION

*)

\* BEGIN TRANSLATION
VARIABLES pc, gFoo

vars == << pc, gFoo >>

ProcSet == {1}

Init == (* Global variables *)
        /\ gFoo = 0
        /\ pc = [self \in ProcSet |-> "lbl"]

lbl == /\ pc[1] = "lbl"
       /\ LET v1 == gFoo IN
            LET gFoo0 == (gFoo) + (1) IN
              LET yielded_gFoo0 == v1 IN
                LET x == yielded_gFoo0 IN
                  LET v0 == gFoo0 IN
                    /\ gFoo' = (gFoo0) + (1)
                    /\ LET yielded_gFoo == v0 IN
                         LET y == (yielded_gFoo) + (x) IN
                           /\ PrintT(y)
                           /\ pc' = [pc EXCEPT ![1] = "Done"]

Example == lbl

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == Example
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ WF_vars(Example)

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION
====
