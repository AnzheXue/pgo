//| mill-version: 1.0.1
//| mill-jvm-version: temurin:21
package build
import mill.*, scalalib.*, publish.*

def scalafmt = scalalib.scalafmt.ScalafmtModule

object pgo extends ScalaModule with SonatypeCentralPublishModule {
  def scalaVersion = "3.7.1"

  def publishVersion: T[String] = "0.1.0-SNAPSHOT"

  override def artifactName: T[String] = "pgo"

  def pomSettings: T[PomSettings] = PomSettings(
    organization = "com.fhackett",
    description = "PGo",
    url = "https://github.com/DistCompiler/pgo",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl.github("distCompiler", "pgo"),
    developers = Seq(
      Developer(
        id = "fhackett",
        name = "Finn Hackett",
        url = "https://fhackett.com/",
      ),
    ),
  )

  def mvnDeps = Seq(
    mvn"com.lihaoyi::os-lib:0.11.4",
    mvn"com.lihaoyi::upickle:4.2.1",
    mvn"io.github.java-diff-utils:java-diff-utils:4.15",
    mvn"org.rogach::scallop:5.2.0",
    mvn"org.scala-lang.modules::scala-parser-combinators:2.4.0",
  )

  override def scalacOptions: T[Seq[String]] =
    Seq("-deprecation") // "-Ximport-suggestion-timeout 0"

  override def sources: T[Seq[PathRef]] =
    Task.Sources(moduleDir / os.up / "src")

  // def tla2tools: T[PathRef] = T {
  //   val result = requests.get("https://nightly.tlapl.us/dist/tla2tools.jar")
  //   os.write(T.dest / "tla2tools.jar", result)
  //   PathRef(T.dest)
  // }

  def communityModules: T[PathRef] = Task {
    val result = requests.get(
      "https://github.com/tlaplus/CommunityModules/releases/latest/download/CommunityModules-deps.jar",
    )
    os.write(Task.dest / "CommunityModules-deps.jar", result)
    PathRef(Task.dest)
  }

  def resourcesFolder: T[PathRef] = Task.Source(moduleDir / os.up / "resources")

  override def resources: T[Seq[PathRef]] = Task {
    Seq(
      // tla2tools(), // it's vendored in resources due to ongoing PR
      communityModules(),
      resourcesFolder(),
    )
  }

  object test extends ScalaTests {
    def mvnDeps = Seq(
      mvn"org.scalameta::munit::1.1.1",
      mvn"org.scalameta::munit-scalacheck:1.1.0",
      mvn"com.lihaoyi::pprint:0.9.0",
      mvn"com.lihaoyi::mainargs:0.7.6",
      mvn"com.github.daddykotex::courier:3.2.0",
    )
    def testFramework = "munit.Framework"

    override def sources: T[Seq[PathRef]] =
      Task.Sources(moduleDir / os.up / os.up / "test")

    override def testParallelism: T[Boolean] = false
  }
}
