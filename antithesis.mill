package build

import mill._

trait Meta extends Module {
  final def wsRoot = mill.api.WorkspaceRoot.workspaceRoot

  final def pgoDir = wsRoot
  final def systemsDir = pgoDir / "systems"
  final def antithesisDir = systemsDir / "antithesis"
  final def antithesisInstrumentorURL =
    "github.com/antithesishq/antithesis-sdk-go/tools/antithesis-go-instrumentor@latest"

  final def tenantName = "mongoresearch"

  final def cmd(cwd: os.Path = os.pwd)(chunks: os.Shellable*): Unit = {
    val p = os.proc(chunks: _*)
    println(s"$$ ${p.commandChunks.mkString(" ")}")
    p.call(
      cwd = cwd,
      stdin = os.Inherit,
      stdout = os.Inherit,
      stderr = os.Inherit,
    )
    ()
  }

  def userName: T[String] = Task.Input {
    os.read(antithesisDir / "mongoresearch.user.txt")
  }

  def password: T[String] = Task.Input {
    os.read(antithesisDir / "mongoresearch.password.txt")
  }
}

trait DockerImg extends Meta {
  def contextDir: T[os.Path]
  def dockerFile: T[PathRef]
  protected def imageTag: T[String]

  def loginDocker: T[Unit] = Task.Input {
    os.proc(
      "docker",
      "login",
      "-u",
      "_json_key",
      "https://us-central1-docker.pkg.dev",
      "--password-stdin",
    ).call(
      stdin = keyFile(),
      stdout = os.Inherit,
      stderr = os.Inherit,
    )
    ()
  }

  def image: T[String] = T {
    cmd()(
      "docker",
      "build",
      contextDir(),
      "--platform",
      "linux/amd64",
      "--file",
      dockerFile().path,
      "-t",
      imageTag(),
    )
    imageTag()
  }

  def pushToAntithesis: T[Unit] = Task.Input {
    loginDocker()
    cmd()(
      "docker",
      "tag",
      image(),
      s"us-central1-docker.pkg.dev/molten-verve-216720/${tenantName}-repository/${image()}",
    )
    cmd()(
      "docker",
      "push",
      s"us-central1-docker.pkg.dev/molten-verve-216720/${tenantName}-repository/${image()}",
    )
  }

  def keyFile: T[String] = Task.Input {
    os.read(antithesisDir / "mongoresearch.key.json")
  }
}

trait AntithesisRunner extends Meta {
  def duration: T[Int] = 30
  def configImg: T[String]
  def images: T[Seq[String]]

  def launch = Task.Input {
    val data = ujson.Obj(
      "params" -> ujson.Obj(
        "antithesis.description" -> "basic_test on main",
        "antithesis.duration" -> duration().toString(),
        "antithesis.config_image" -> configImg(),
        "antithesis.images" -> images().mkString(";"),
        "antithesis.report.recipients" -> "finn.hackett@mongodb.com",
      ),
    )

    println(s"making request: $data")
    val resp = requests.post(
      s"https://$tenantName.antithesis.com/api/v1/launch/basic_test",
      auth = (userName(), password()),
      data = data.toString, // toString to work around HTTP/1.1 incompatibility
    )
    println(s"CODE ${resp.statusCode}")
    println(resp.text())
  }

  def dryRun = Task.Input {
    configImg() match {
      case s"$name-config:$_" =>
        cmd(cwd = antithesisDir / name)(
          "docker",
          "compose",
          "up",
        )
    }
  }
}

trait AntithesisModule extends Meta {
  // with dependency checking
  final def dqueueDir: T[PathRef] = Task.Source(systemsDir / "dqueue")
  final def raftkvsDir: T[PathRef] = Task.Source(systemsDir / "raftkvs")
  final def distsysDir: T[PathRef] = Task.Source(pgoDir / "distsys")
  final def antithesisDirS: T[PathRef] = Task.Source(antithesisDir)

  def pgoAssembly: T[os.Path]

  def goInstrumentor: T[os.Path] = T {
    cmd()(
      "go",
      "install",
      antithesisInstrumentorURL,
    )

    val p = os.proc(
      "go",
      "env",
      "GOPATH",
    )

    val result = p.call(check = true)
    os.Path(result.out.text().strip()) / "bin" / "antithesis-go-instrumentor"
  }

  trait InstrumentedGoModule extends Module {
    def srcPath: T[os.Path]

    def mod: T[os.Path] = T {
      cmd()(
        goInstrumentor(),
        srcPath(),
        Task.dest,
      )
      Task.dest
    }
  }

  object instrumentedDistsys extends InstrumentedGoModule {
    def srcPath: T[os.Path] = distsysDir().path
  }

  object dqueue extends Module {
    object runner extends AntithesisRunner {
      def configImg: T[String] = dqueue.configImg.image()
      def images: T[Seq[String]] = Seq(
        dqueue.testImg.image(),
      )
    }

    object instrumentedDQueue extends InstrumentedGoModule {
      def srcPath: T[os.Path] = dqueueDir().path
    }

    def dqueueWs: T[os.Path] = T {
      val dest = Task.dest

      os.write(dest / "go.work", data = "go 1.24.0\n")

      def getPackageName(notifier: os.Path): String = {
        os.read(notifier)
          .linesIterator
          .take(1)
          .toList
          .map { case s"package $name" =>
            name
          }
          .head
      }

      def renameNotifier(): Unit = {
        val notifier = dest / "notifier" / "notifier.go"
        val name = getPackageName(notifier)
        os.move(
          notifier,
          dest / "notifier" / name / "notifier.go",
          createFolders = true,
        )
      }

      os.copy(instrumentedDistsys.mod() / "notifier", dest / "notifier")
      renameNotifier()
      os.copy.into(
        instrumentedDQueue.mod() / "notifier" / "notifier.go",
        dest / "notifier",
      )
      renameNotifier()

      os.copy(instrumentedDistsys.mod() / "customer", dest / "distsys")
      os.copy(instrumentedDQueue.mod() / "customer", dest / "dqueue")

      os.copy(
        instrumentedDistsys.mod() / "symbols",
        dest / "symbols",
        mergeFolders = true,
      )
      os.copy(
        instrumentedDQueue.mod() / "symbols",
        dest / "symbols",
        mergeFolders = true,
      )

      cmd(cwd = dest)(
        "go",
        "work",
        "use",
        dest / "notifier",
        dest / "distsys",
        dest / "dqueue",
      )

      dest
    }

    def dqueueTests: T[os.Path] = T {
      cmd(cwd = dqueueWs())(
        "go",
        "test",
        "github.com/DistCompiler/pgo/systems/dqueue",
        "-c",
        "-o",
        Task.dest / "dqueue.test",
      )

      Task.dest / "dqueue.test"
    }

    object testImg extends DockerImg {
      def contextDir: T[os.Path] = T {
        val dest = Task.dest

        os.copy(pgoAssembly(), dest / "pgo.jar")
        os.copy(dqueueTests(), dest / "dqueue.test")
        os.copy(antithesisDirS().path, dest, mergeFolders = true)

        dest
      }
      def dockerFile: T[PathRef] =
        Task.Source(antithesisDir / "dqueue" / "Dockerfile.test")
      protected def imageTag: T[String] = "dqueue:antithesis"
    }

    object configImg extends DockerImg {
      def contextDir: T[os.Path] = antithesisDirS().path
      def dockerFile: T[PathRef] =
        Task.Source(antithesisDir / "dqueue" / "Dockerfile.config")
      protected def imageTag: T[String] = "dqueue-config:antithesis"
    }
  }

  object raftkvs extends Module {
    // object img extends DockerImg {

    // }
  }
}
