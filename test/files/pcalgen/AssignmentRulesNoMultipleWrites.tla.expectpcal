---- MODULE AssignmentRules ----
EXTENDS Sequences, FiniteSets, Integers
(*
--mpcal AssignmentRules {
  macro MyMacro(x) {
    x := 3;
    y := 4;
  }

  procedure Proc2()
  variables x, y;
  {
        l1: MyMacro(x);
        l2: MyMacro(x); MyMacro(x);
        l3: MyMacro(x); y := y + 1;
        l4: MyMacro(x); x := -1;
  }

  procedure MyProcedure(x, y)
  variables x, y;
  {
         p: either { y := 10 } or { skip };
            y := 11; (* missing label *)
         p2: y := 20;
             x := y || y := x; (* swap x and y: invalid *)
     }

  archetype MyArchetype(ref x)
  variables x;
  {
         a1: x := 10;
         x := 11; (* missing label *)
     }

  process (MyProcess = 23)
  variables n;
  {
         l1: n := 2;
         l2: while (n < 10) {
             n := 12;
             if (n = 20) {
                 n := 100; (* missing label *)
             }
         };
         n := 32; (* label not missing *)

         l3: if (n = 32) {
             n := 0;
         };
         n := 12; (* missing label *)
     }
}

\* BEGIN PLUSCAL TRANSLATION
--algorithm AssignmentRules {
  
  process (MyProcess = 23)
    variables n;
  {
    l1:
      n := 2;
      goto l2;
    l2:
      if ((n) < (10)) {
        with (n0 = 12) {
          if ((n0) = (20)) {
            n := 100;
            goto l2;
          } else {
            n := n0;
            goto l2;
          };
        };
      } else {
        n := 32;
        goto l3;
      };
    l3:
      if ((n) = (32)) {
        with (n1 = 0) {
          n := 12;
          goto Done;
        };
      } else {
        n := 12;
        goto Done;
      };
  }
}

\* END PLUSCAL TRANSLATION

*)
\* BEGIN TRANSLATION
CONSTANT defaultInitValue
VARIABLES pc, n

vars == << pc, n >>

ProcSet == {23}

Init == (* Process MyProcess *)
        /\ n = defaultInitValue
        /\ pc = [self \in ProcSet |-> "l1"]

l1 == /\ pc[23] = "l1"
      /\ n' = 2
      /\ pc' = [pc EXCEPT ![23] = "l2"]

l2 == /\ pc[23] = "l2"
      /\ IF (n) < (10)
            THEN /\ LET n0 == 12 IN
                      IF (n0) = (20)
                         THEN /\ n' = 100
                              /\ pc' = [pc EXCEPT ![23] = "l2"]
                         ELSE /\ n' = n0
                              /\ pc' = [pc EXCEPT ![23] = "l2"]
            ELSE /\ n' = 32
                 /\ pc' = [pc EXCEPT ![23] = "l3"]

l3 == /\ pc[23] = "l3"
      /\ IF (n) = (32)
            THEN /\ LET n1 == 0 IN
                      /\ n' = 12
                      /\ pc' = [pc EXCEPT ![23] = "Done"]
            ELSE /\ n' = 12
                 /\ pc' = [pc EXCEPT ![23] = "Done"]

MyProcess == l1 \/ l2 \/ l3

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == MyProcess
           \/ Terminating

Spec == Init /\ [][Next]_vars

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION
====
